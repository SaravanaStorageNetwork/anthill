/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/gluster/anthill/pkg/apis/anthill/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GlusterClusterLister helps list GlusterClusters.
type GlusterClusterLister interface {
	// List lists all GlusterClusters in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.GlusterCluster, err error)
	// GlusterClusters returns an object that can list and get GlusterClusters.
	GlusterClusters(namespace string) GlusterClusterNamespaceLister
	GlusterClusterListerExpansion
}

// glusterClusterLister implements the GlusterClusterLister interface.
type glusterClusterLister struct {
	indexer cache.Indexer
}

// NewGlusterClusterLister returns a new GlusterClusterLister.
func NewGlusterClusterLister(indexer cache.Indexer) GlusterClusterLister {
	return &glusterClusterLister{indexer: indexer}
}

// List lists all GlusterClusters in the indexer.
func (s *glusterClusterLister) List(selector labels.Selector) (ret []*v1alpha1.GlusterCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GlusterCluster))
	})
	return ret, err
}

// GlusterClusters returns an object that can list and get GlusterClusters.
func (s *glusterClusterLister) GlusterClusters(namespace string) GlusterClusterNamespaceLister {
	return glusterClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GlusterClusterNamespaceLister helps list and get GlusterClusters.
type GlusterClusterNamespaceLister interface {
	// List lists all GlusterClusters in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.GlusterCluster, err error)
	// Get retrieves the GlusterCluster from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.GlusterCluster, error)
	GlusterClusterNamespaceListerExpansion
}

// glusterClusterNamespaceLister implements the GlusterClusterNamespaceLister
// interface.
type glusterClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GlusterClusters in the indexer for a given namespace.
func (s glusterClusterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GlusterCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GlusterCluster))
	})
	return ret, err
}

// Get retrieves the GlusterCluster from the indexer for a given namespace and name.
func (s glusterClusterNamespaceLister) Get(name string) (*v1alpha1.GlusterCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("glustercluster"), name)
	}
	return obj.(*v1alpha1.GlusterCluster), nil
}
